#!/bin/bash

HERE=$(readlink --canonicalize "$(dirname "${BASH_SOURCE[0]}")")
PATH="$HERE:$PATH"

ensure-file-exists() {
  if [ ! -f "$1" ]; then
    die "'$1' is not a file" >&2
  fi
}

USAGE="$0 PROJECT BUG COVERAGE_MATRIX STATEMENT_NAMES COVERAGE_TOOL ANALYSIS_TYPE LOGGING RESULT_DIR"
die() {
  echo "$@" >&2
  exit 1
}

if [ "$#" != 8 ]; then die "usage: $USAGE"; fi
export PROJECT=$1
export BUG=$2
COVERAGE_MATRIX=$(readlink --canonicalize "$3"); ensure-file-exists "$COVERAGE_MATRIX"
if [[ "$COVERAGE_MATRIX" = *.gz ]]; then COVERAGE_MATRIX=${COVERAGE_MATRIX%.gz}; zcat <$COVERAGE_MATRIX.gz >$COVERAGE_MATRIX || die 'unable to unzip coverage matrix'; fi
STATEMENT_NAMES=$(readlink --canonicalize "$4"); ensure-file-exists "$STATEMENT_NAMES"
if [[ "$STATEMENT_NAMES" = *.gz ]]; then STATEMENT_NAMES=${STATEMENT_NAMES%.gz}; zcat <$STATEMENT_NAMES.gz >$STATEMENT_NAMES || die 'unable to unzip spectra'; fi
COVERAGE_TOOL=$5
ANALYSIS_TYPE=$6
LOGGING=$7
RESULT_DIR=$8

if [ ! -d "$HERE/source-code-lines" ]; then
  tar -zxf "$HERE/source-code-lines.tar.gz" -d "$HERE"
fi

#mkdir -p "$WORKING_DIR"
#pushd "$WORKING_DIR" >/dev/null
mkdir -p "$RESULT_DIR/$PROJECT/$BUG/"
pushd "$RESULT_DIR/$PROJECT/$BUG/" >/dev/null

if [ ${ANALYSIS_TYPE} == "sbfl" ] || [ ${ANALYSIS_TYPE} == "all" ]; then
  mkdir -p sbfl
  pushd sbfl >/dev/null

  do-sbfl-analysis "$PROJECT" "$BUG" "$COVERAGE_MATRIX" "$STATEMENT_NAMES" || exit 1

  popd >/dev/null
fi

if [ ${ANALYSIS_TYPE} == "mlfl" ] || [ ${ANALYSIS_TYPE} == "all" ]; then
  mkdir -p mlfl
  pushd mlfl >/dev/null

  do-mlfl-analysis "$PROJECT" "$BUG" "$COVERAGE_MATRIX" "$STATEMENT_NAMES" || exit 1

  popd >/dev/null
fi

popd >/dev/null

find ../../reports/$PROJECT/$BUG/{sbfl,mlfl} -name score.txt | \
  python3 "$HERE/gather-scores-into-master-scoring-file.py" \
    --project "$PROJECT" --bug "$BUG" --test-suite "developer" \
    --coverage_tool "gzoltar" --logging "$LOGGING" \
  > "../../reports/$PROJECT/$BUG/scores.csv" || exit 1

echo "DONE!"
exit 0
