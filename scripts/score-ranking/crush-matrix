#!/usr/bin/python2.7

"""Turns a coverage-matrix into a statement/dua suspiciousness vector. Usage:

    crush-matrix \
      --formula (tarantula|ochiai) \
      --matrix FILE \
      --element-type (Statement|DUA) \
      --element-names FILE \
      --total-defn (tests|elements) \
      --output FILE

where `--element-type` indicates whether the entries of the resulting vector correspond to statements or dua(s);

and `--element-names` is the path to a file whose nth line identifies the code element (statement/dua) to which the nth matrix column refers

and `--total-defn` indicates whether, in the formula, "totalpassed" should refer to the number of passing tests, or the number of times a passing test covers an element/dua. (And the same for "totalfailed".)
"""

from __future__ import division
import collections
import sys
import traceback

from formulas import *

def crush_row(formula, passed, failed, totalpassed, totalfailed):
  '''Returns the suspiciousness of a statement or dua.

  ``formula`` (a string) is the name of the formula to plug passed/failed/totalpassed/totalfailed into.
  '''
  try:
    return FORMULAS[formula](passed, failed, totalpassed, totalfailed)
  except ZeroDivisionError as zeroDivisionError:
    sys.stderr.write("Warn: catch integer division or modulo by zero for " + formula + "\n")
    sys.stderr.write("Passed: " + str(passed) + "\nFailed: " + str(failed) + "\nTotalPassed: " + str(totalpassed) + "\nTotalFailed: " + str(totalfailed) + "\n")
    return 0
  except:
    traceback.print_exc()
    sys.stderr.write("Passed: " + str(passed) + "\nFailed: " + str(failed) + "\nTotalPassed: " + str(totalpassed) + "\nTotalFailed: " + str(totalfailed) + "\n")
    sys.exit(1)

def suspiciousnesses_from_tallies(formula, tally):
  '''Returns a dict mapping element-number to suspiciousness.
  '''
  return {
    element: crush_row(
      formula=formula,
      passed=float(tally.passed[element]), failed=float(tally.failed[element]),
      totalpassed=float(tally.totalpassed), totalfailed=float(tally.totalfailed))
    for element in range(tally.n_elements)}


TestSummary = collections.namedtuple('TestSummary', ('triggering', 'covered_elements'))
def parse_test_summary(line, n_elements):
  words = line.strip().split(' ')
  coverages, sign = words[:-1], words[-1]
  if len(coverages) != n_elements:
    raise ValueError("expected {expected} elements in each row, got {actual} in {line!r}".format(expected=n_elements, actual=len(coverages), line=line))
  return TestSummary(
    triggering=(sign == '-'),
    covered_elements=set(i for i in range(len(words)) if words[i]=='1'))

PassFailTally = collections.namedtuple('PassFailTally', ('n_elements', 'passed', 'failed', 'totalpassed', 'totalfailed'))
def tally_matrix(matrix_file, total_defn, n_elements):
  '''Returns a PassFailTally describing how many passing/failing tests there are, and how many of each cover each code element.

  ``total_defn`` may be "tests" (in which case the tally's ``totalpassed`` will be the number of passing tests) or "elements" (in which case it'll be the number of times a passing test covers a code element) (and same for ``totalfailed``).

  ``n_elements`` is the number of code elements that each row of the matrix should indicate coverage for.
  '''
  summaries = (parse_test_summary(line, n_elements) for line in matrix_file)

  passed = {i: 0 for i in range(n_elements)}
  failed = {i: 0 for i in range(n_elements)}
  totalpassed = 0
  totalfailed = 0
  for summary in summaries:
    if summary.triggering:
      totalfailed += (1 if total_defn == 'tests' else len(summary.covered_elements))
      for element_number in summary.covered_elements:
        failed[element_number] += 1
    else:
      totalpassed += (1 if total_defn == 'tests' else len(summary.covered_elements))
      for element_number in summary.covered_elements:
        passed[element_number] += 1

  return PassFailTally(n_elements, passed, failed, totalpassed, totalfailed)

if __name__ == '__main__':

  import argparse
  import csv

  parser = argparse.ArgumentParser()
  parser.add_argument('--formula', required=True, choices=set(FORMULAS.keys()))
  parser.add_argument('--matrix', required=True, help='path to the coverage matrix')
  parser.add_argument('--element-type', required=True, choices=['Statement', 'DUA'], help='file enumerating names for matrix columns')
  parser.add_argument('--element-names', required=True, help='file enumerating names for matrix columns')
  parser.add_argument('--total-defn', required=True, choices=['tests', 'elements'], help='whether totalpassed/totalfailed should counts tests or covered elements/dua(s)')
  parser.add_argument('--output', required=True, help='file to write suspiciousness vector to')

  args = parser.parse_args()

  with open(args.element_names) as name_file:
    element_names = {i: name.strip() for i, name in enumerate(name_file)}

  n_elements = len(element_names)

  with open(args.matrix) as matrix_file:
    tally = tally_matrix(matrix_file, args.total_defn, n_elements=n_elements)

  suspiciousnesses = suspiciousnesses_from_tallies(formula=args.formula, tally=tally)

  with open(args.output, 'w') as output_file:
    writer = csv.DictWriter(output_file, [args.element_type,'Suspiciousness'])
    writer.writeheader()
    for element in range(n_elements):
      writer.writerow({
        args.element_type: element_names[element],
        'Suspiciousness': suspiciousnesses[element]})
