#!/bin/bash

HERE=$(readlink --canonicalize "$(dirname "${BASH_SOURCE[0]}")")
PATH="$HERE:$PATH"

USAGE="$0 [--restrictions-file FILE] PROJECT BUG COVERAGE_MATRIX"
die() {
  echo "$@" >&2
  exit 1
}

if [ "$#" != 3 ]; then echo "usage: $USAGE" >&2; exit 1; fi
PROJECT=$1
BUG=$2
COVERAGE_MATRIX=$3"/jaguar/.jaguar/matrix/relevant/filtered"
#COVERAGE_MATRIX="$(readlink --canonicalize "$3")"; if [ ! -f "$COVERAGE_MATRIX" ]; then echo "given coverage matrix does not exist" >&2; exit 1; fi
#STATEMENT_NAMES="$(readlink --canonicalize "$4")"; if [ ! -f "$STATEMENT_NAMES" ]; then echo "given statement-names file does not exist" >&2; exit 1; fi

DIR="model-neural-network"; mkdir -p "$DIR"; pushd "$DIR" >/dev/null

first_file=1
for matrix_file_path in `find $COVERAGE_MATRIX -maxdepth 1 -mindepth 1 -type f`; do
  IFS='/' read -ra matrix_file_path_array <<< "$matrix_file_path"
  index=${#matrix_file_path_array[@]}
  filename=${matrix_file_path_array[((index-1))]}
  filename=${filename%".matrix"}

  STATEMENT_NAMES=$3"/jaguar/.jaguar/spectra/relevant/"$filename".spectra"

  STMT_SUSPS_FILE="$(pwd)/"$filename"-stmt-susps.txt"
  STMT_SUSPS_FILE_UNIFIED="$(pwd)/stmt-susps.txt"

  #echo $HERE
  python3 $HERE/neural-network-fl-analysis.py --matrix "$matrix_file_path" \
                                              --element-names "$STATEMENT_NAMES" \
                                              --output "$STMT_SUSPS_FILE" || exit 1

  first_line=1      
  while read line; do
    if [ $first_line == 1 ]; then
      first_line=0
      if [ $first_file == 1 ]; then
        first_file=0
      else
        continue
      fi
    fi
    echo $line >> $STMT_SUSPS_FILE_UNIFIED
  done < $STMT_SUSPS_FILE
done

LINE_SUSPS_FILE=$(pwd)/line-susps.txt
dua-susps-to-line-susps --dua-susps "$STMT_SUSPS_FILE_UNIFIED" \
                        --output "$LINE_SUSPS_FILE"
                              
DEST="$(pwd)/score.txt"
score-ranking --project "$PROJECT" --bug "$BUG" \
              --line-susps <(tail -n +2 "$LINE_SUSPS_FILE") \
              --scoring-scheme "first" \
              --sloc-csv "$HERE/buggy-lines/sloc.csv" \
              --buggy-lines "$HERE/buggy-lines/$PROJECT-$BUG.buggy.lines" \
              --output "$DEST"

popd >/dev/null
